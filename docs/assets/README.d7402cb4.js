var t='<h2 id="functions">Functions</h2>\n<dl>\n<dt><a href="#arrayEqual">`arrayEqual(arr1, arr2)`</a> ⇒ <code>Boolean</code></dt>\n<dd><p>判断两个数组是否相等</p>\n</dd>\n<dt><a href="#fuzzyQuery">`fuzzyQuery(list, field, keyWord)`</a> ⇒ <code>Array</code></dt>\n<dd><p>对象数组模糊查询</p>\n</dd>\n<dt><a href="#objArrayDelRepetitive">`objArrayDelRepetitive(arr, 对象中相同的关键字(如id))`</a> ⇒ <code>Array</code></dt>\n<dd><p>对象数组去重</p>\n</dd>\n<dt><a href="#throttle">`throttle(delay, noTrailing, callback, debounceMode)`</a> ⇒ <code>function</code></dt>\n<dd><p>函数节流。\n适用于限制<code>resize</code>和<code>scroll</code>等函数的调用频率</p>\n</dd>\n<dt><a href="#debounce">`debounce(delay, atBegin, callback)`</a> ⇒ <code>function</code></dt>\n<dd><p>函数防抖 \n与throttle不同的是，debounce保证一个函数在多少毫秒内不再被触发，只会执行一次，\n要么在第一次调用return的防抖函数时执行，要么在延迟指定毫秒后调用。</p>\n</dd>\n<dt><a href="#deepClone">`deepClone(values)`</a> ⇒ <code>Any</code></dt>\n<dd><p>深拷贝，支持常见类型</p>\n</dd>\n<dt><a href="#isEmptyObject">`isEmptyObject(obj)`</a> ⇒ <code>Boolean</code></dt>\n<dd><p>判断<code>obj</code>是否为空</p>\n</dd>\n<dt><a href="#randomColor">`randomColor(title, author)`</a> ⇒ <code>String</code></dt>\n<dd><p>随机生成颜色</p>\n</dd>\n<dt><a href="#randomNum">`randomNum(min, max, title, author)`</a></dt>\n<dd><p>生成指定范围[min, max]的随机数</p>\n</dd>\n</dl>\n\n<p><a name="arrayDelRepetitive"></a></p>\n<h2 id="arraydelrepetitive-⇒-array"><code>arrayDelRepetitive</code> ⇒ <code>Array</code></h2>\n<p>数组去重</p>\n<p><strong>Kind</strong>: global Array - 数组类函数<br><strong>Returns</strong>: <code>Array</code> - eg: arrayDelRepetitive([1,2],[2,5],[3,5,9])  //  [1, 2, 5, 3, 9]  </p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arr1</td>\n<td><code>Array</code></td>\n<td>去重的对象</td>\n</tr>\n<tr>\n<td>...arr2</td>\n<td><code>Array</code></td>\n<td>可以同时合并多个数组之后再去重</td>\n</tr>\n</tbody></table>\n<p><a name="arrayEqual"></a></p>\n<h2 id="arrayequalarr1-arr2-⇒-boolean"><code>arrayEqual(arr1, arr2)</code> ⇒ <code>Boolean</code></h2>\n<p>判断两个数组是否相等</p>\n<p><strong>Kind</strong>: global function  </p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arr1</td>\n<td><code>Array</code></td>\n</tr>\n<tr>\n<td>arr2</td>\n<td><code>Array</code></td>\n</tr>\n</tbody></table>\n<p><a name="fuzzyQuery"></a></p>\n<h2 id="fuzzyquerylist-field-keyword-⇒-array"><code>fuzzyQuery(list, field, keyWord)</code> ⇒ <code>Array</code></h2>\n<p>对象数组模糊查询</p>\n<p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>Array</code> - 查询的结果\neg: fuzzyQuery([{key:123},{key:62},{key:7}], &#39;key&#39;, 2)  // [{key:123},{key:62}]  </p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>list</td>\n<td><code>Array</code></td>\n<td>原数组</td>\n</tr>\n<tr>\n<td>field</td>\n<td><code>String</code></td>\n<td>对应字段</td>\n</tr>\n<tr>\n<td>keyWord</td>\n<td><code>String</code></td>\n<td>查询的关键词</td>\n</tr>\n</tbody></table>\n<p><a name="objArrayDelRepetitive"></a></p>\n<h2 id="objarraydelrepetitivearr-对象中相同的关键字如id-⇒-array"><code>objArrayDelRepetitive(arr, 对象中相同的关键字(如id))</code> ⇒ <code>Array</code></h2>\n<p>对象数组去重</p>\n<p><strong>Kind</strong>: global function  </p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arr</td>\n<td><code>Array</code></td>\n</tr>\n<tr>\n<td>对象中相同的关键字(如id)</td>\n<td><code>String</code></td>\n</tr>\n</tbody></table>\n<p><a name="throttle"></a></p>\n<h2 id="throttledelay-notrailing-callback-debouncemode-⇒-function"><code>throttle(delay, noTrailing, callback, debounceMode)</code> ⇒ <code>function</code></h2>\n<p>函数节流。\n适用于限制<code>resize</code>和<code>scroll</code>等函数的调用频率</p>\n<p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>function</code> - 新的节流函数  </p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>delay</td>\n<td><code>Number</code></td>\n<td>0 或者更大的毫秒数。 对于事件回调，大约100或250毫秒（或更高）的延迟是最有用的。</td>\n</tr>\n<tr>\n<td>noTrailing</td>\n<td><code>Boolean</code></td>\n<td>可选，默认为false。                                    如果noTrailing为true，当节流函数被调用，每过<code>delay</code>毫秒<code>callback</code>也将执行一次。                                    如果noTrailing为false或者未传入，<code>callback</code>将在最后一次调用节流函数后再执行一次.                                    （延迟<code>delay</code>毫秒之后，节流函数没有被调用,内部计数器会复位）</td>\n</tr>\n<tr>\n<td>callback</td>\n<td><code>function</code></td>\n<td>延迟毫秒后执行的函数。<code>this</code>上下文和所有参数都是按原样传递的，                                    执行去节流功能时，调用<code>callback</code>。</td>\n</tr>\n<tr>\n<td>debounceMode</td>\n<td><code>Boolean</code></td>\n<td>如果<code>debounceMode</code>为true，<code>clear</code>在<code>delay</code>ms后执行。                                    如果debounceMode是false，<code>callback</code>在<code>delay</code> ms之后执行。</td>\n</tr>\n</tbody></table>\n<p><a name="debounce"></a></p>\n<h2 id="debouncedelay-atbegin-callback-⇒-function"><code>debounce(delay, atBegin, callback)</code> ⇒ <code>function</code></h2>\n<p>函数防抖 \n与throttle不同的是，debounce保证一个函数在多少毫秒内不再被触发，只会执行一次，\n要么在第一次调用return的防抖函数时执行，要么在延迟指定毫秒后调用。</p>\n<p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>function</code> - 新的防抖函数。  </p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>delay</td>\n<td><code>Number</code></td>\n<td>0或者更大的毫秒数。 对于事件回调，大约100或250毫秒（或更高）的延迟是最有用的。</td>\n</tr>\n<tr>\n<td>atBegin</td>\n<td><code>Boolean</code></td>\n<td>可选，默认为false。                                  如果<code>atBegin</code>为false或未传入，回调函数则在第一次调用return的防抖函数后延迟指定毫秒调用。                                     如果<code>atBegin</code>为true，回调函数则在第一次调用return的防抖函数时直接执行</td>\n</tr>\n<tr>\n<td>callback</td>\n<td><code>function</code></td>\n<td>延迟毫秒后执行的函数。<code>this</code>上下文和所有参数都是按原样传递的，                                  执行去抖动功能时，，调用<code>callback</code>。</td>\n</tr>\n</tbody></table>\n<p><strong>Example</strong>  </p>\n<pre><code class="language-javascript">适用场景：如在线编辑的自动存储防抖。\n</code></pre>\n<p><a name="deepClone"></a></p>\n<h2 id="deepclonevalues-⇒-any"><code>deepClone(values)</code> ⇒ <code>Any</code></h2>\n<p>深拷贝，支持常见类型</p>\n<p><strong>Kind</strong>: global function  </p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>values</td>\n<td><code>Any</code></td>\n</tr>\n</tbody></table>\n<p><a name="isEmptyObject"></a></p>\n<h2 id="isemptyobjectobj-⇒-boolean"><code>isEmptyObject(obj)</code> ⇒ <code>Boolean</code></h2>\n<p>判断<code>obj</code>是否为空</p>\n<p><strong>Kind</strong>: global function  </p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>obj</td>\n<td><code>Object</code></td>\n</tr>\n</tbody></table>\n<p><a name="randomColor"></a></p>\n<h2 id="randomcolortitle-author-⇒-string"><code>randomColor(title, author)</code> ⇒ <code>String</code></h2>\n<p>随机生成颜色</p>\n<p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>String</code> - color  </p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>string</code></td>\n<td>The title of the book.</td>\n</tr>\n<tr>\n<td>author</td>\n<td><code>string</code></td>\n<td>The author of the book.</td>\n</tr>\n</tbody></table>\n<p><a name="randomNum"></a></p>\n<h2 id="randomnummin-max-title-author"><code>randomNum(min, max, title, author)</code></h2>\n<p>生成指定范围[min, max]的随机数</p>\n<p><strong>Kind</strong>: global function  </p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>min</td>\n<td><code>Number</code></td>\n<td></td>\n</tr>\n<tr>\n<td>max</td>\n<td><code>Number</code></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td><code>string</code></td>\n<td>The title of the book.</td>\n</tr>\n<tr>\n<td>author</td>\n<td><code>string</code></td>\n<td>The author of the book.</td>\n</tr>\n</tbody></table>\n';export{t as default};
